#!/bin/bash
do_run=1 # Execute(evaluate) the commands
#do_run=0 # Don't evaluate any commands
#
MY_DIR=$(dirname $(readlink -f $0))
. $MY_DIR/common.sh
#echo $?
if [ $? -eq 1 ]; then
  echo ""
  echo "Copy the $MY_DIR/common.sh.template file to $MY_DIR/common.sh and adjust before continuing."
  echo ""
  cmd='cp '$MY_DIR/common.sh.template' '$MY_DIR/common.sh
  echo $cmd
  echo ""
  cmd='vi '$MY_DIR/common.sh
  echo $cmd
  echo ""
  exit
fi
echo ""
echo "Including common.sh from "$MY_DIR
echo ""
echo "host:$host port:$port tenant:$tenant org:$org space:$space xsa_user:$xsa_user"
xsorcf=$1
proj=$2
path=$3
echo "xsorcf:$xsorcf proj:$proj path:$path"
echo ""
#exit
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 3 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | head -n -8"
      doexport2=" | head -n -1"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  echo HDI Deploy $path into Org: $org Space: $space Starting...
  echo ""
  cmd='npm config set @sap:registry "https://npm.sap.com/" ; npm config set registry "https://registry.npmjs.org/" ; npm config set strict-ssl true'
  echo $cmd
  echo ""
  if [ $do_run -eq 1 ]; then echo "Do Run!"; else echo "Dry Run!"; fi
  echo ""

  cmd=$xsorcf' target -o '$org' -s '$space
  echo $cmd
  eval $cmd

#xs push blackz_db_v0 -p db_client/ -m 256M -k 256M --no-route --no-start
#find . -name '.vfs' -exec rm -rf {} \;

  app=$proj'-db'

  cmd=$xsorcf' push '$app' -p '$path'/ -m 256M -k 256M --no-route --no-start -u none'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

#xs cs hana hdi-shared BLACKZ_V0 -t client_v0

  service='hana'
  plan='hdi-shared'
  instance='boost-cfs-hdb'

  cmd=$xsorcf' create-service '$service' '$plan' '$instance
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  if [ $RESULT -ne 0 ]; then
    cmd=$xsorcf' create-service '$service' '$plan' '$instance
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
  fi
  
  cmd=$xsorcf' service '$instance
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'HDI CREATE RESULT:'$RESULT

  # Service creation is NOT guarenteed to happen right away
  while [ $RESULT -ne 0 ]; do
    sleep 30
    cmd=$xsorcf' service '$instance
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?

    echo 'RESULT:'$RESULT
    # Handle CF creation of services a bit differently
    # cf services | grep dat368-hdi | grep "create succeeded"
  done 

#xs bind-service blackz_db_v0 BLACKZ_V0

  cmd=$xsorcf' bind-service '$app' '$instance
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#xs restart blackz_db_v0

  cmd=$xsorcf' restart '$app
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#sleep 10

  cmd='sleep 10'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#xs logs blackz_db_v0 --recent | grep "Application can be stopped."

  cmd=$xsorcf' logs '$app' --recent | grep "Application can be stopped."'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'HDI CREATE RESULT:'$RESULT

  # HDI is NOT guarenteed finish instantly
  while [ $RESULT -ne 0 ]; do
    sleep 10
    cmd=$xsorcf' logs '$app' --recent | grep "Application can be stopped."'
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?

    echo 'RESULT:'$RESULT
    # Handle CF creation of services a bit differently
    # cf services | grep dat368-hdi | grep "create succeeded"
  done 

#xs stop blackz_db_v0

  cmd=$xsorcf' stop '$app
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

  echo ""

  cmd='HDI_SCHEMA=$('$xsorcf' env '$app' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.schema'"'"$doexport2')'
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  echo 'export HDI_SCHEMA='$HDI_SCHEMA

  cmd='HDI_USER=$('$xsorcf' env '$app' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.user'"'"$doexport2')'
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  echo 'export HDI_USER='$HDI_USER

  cmd='HDI_PASS=$('$xsorcf' env '$app' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.password'"'"$doexport2')'
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  echo 'export HDI_PASS='$HDI_PASS

  #exit 1

  in_user='SYSTEM'
  in_role='mta_cfs_boost_admin'

  cmd='hdbsql -i '$inst' -n '$host':'$port' -d '$tenant' -u '$HDI_USER' -p '$HDI_PASS' '"'"'CALL "'$HDI_SCHEMA'"."db_grant_role"(IN_USER => '"'"'"'"'"'"'"'"''$in_user''"'"'"'"'"'"'"'"',IN_ROLE => '"'"'"'"'"'"'"'"''$in_role''"'"'"'"'"'"'"'"',,EX_MESSAGE => ?)'"'"''
  echo $cmd
#  if [ $do_run -eq 1 ]; then eval $cmd; fi
  
else
    echo "Usage ./hdi_deploy xs[cf] proj path"
    exit 1
fi
echo ""
echo HDI Deploy $path Finished
echo ""
